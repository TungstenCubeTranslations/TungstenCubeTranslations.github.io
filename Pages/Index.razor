@page "/"

@inject HttpClient Http

<div class="container-fluid">
    @if (!IsPageLoaded)
    {
        <PageTitle>Loading Novel List</PageTitle>
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (!DoesNovelListExists)
        {
            <PageTitle>Error page</PageTitle>
            <p><em>Sorry, but there was an error.</em></p>
        }
        else
        {
            <PageTitle>Home</PageTitle>
            <div class="container text-center">
                <div class="page-header">
                    <h1>List of novels</h1>
                </div>
            </div>
            <div class="list-group">
            @for (int i = 0; i < novelList.Count; i++)
            {
                <a href="@novelList.GetNovelUrl(i)" class="list-group-item">@novelList[i].Title</a>
            }
            </div>
        }
    }
</div>


@code {
    public bool DoesNovelListExists { get; set; }
    public bool IsPageLoaded { get; set; }

	public NovelList novelList = new NovelList();

    protected async Task LoadNovelList()
    {
        DoesNovelListExists = await novelList.FetchData(Http);
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadNovelList();
        IsPageLoaded = true;
    }
}